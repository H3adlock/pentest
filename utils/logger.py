import logging

DEBUG = logging.DEBUG
INFO = logging.INFO


class TestLogger:
    def __init__(self, name):
        self.formatter = logging.Formatter(
            '%(levelname)s: %(asctime)s %(module)s %(funcName)s -- line:%(lineno)d -- %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
        self.logger = logging.getLogger(self.name)
        self.fh = logging.FileHandler(log_map[name])
        self.fh.setFormatter(formatter)
        self.logger.addHandler(fh)
        self.logger.setLevel(DEBUG)

    def testLogger(self):
        pass


def module_logger(name=None):
    default = "test"
    formatter = logging.Formatter('%(levelname)s: %(asctime)s %(module)s %(funcName)s -- line:%(lineno)d -- %(message)s',
                                  datefmt='%Y-%m-%d %H:%M:%S')
    log_map = {"test": "./log/test.log",
               "cloudbluepentest.core.intercept": "./log/intercept.log",
               "cloudbluepentest.module.base": "./log/module.log",
               "cloudbluepentest.module.roles": "./log/module.log",
               "cloudbluepentest.core.html_parser": "./log/html_parser.log",
               "cloudbluepentest.core.urls": "./log/urls.log"}
    if name:
        logger = logging.getLogger(name)
    else:
        logger = logging.getLogger(default)
        name = default
    fh = logging.FileHandler(log_map[name])
    fh.setFormatter(formatter)
    logger.addHandler(fh)
    logger.setLevel(DEBUG)
    return logger


log = module_logger()
