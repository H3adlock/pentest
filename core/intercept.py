import requests
from decouple import config
from urllib.parse import urljoin
from cloudbluepentest.utils.logger import module_logger, log
import pytest

intercept_log = module_logger(__name__)
TIMEOUT = 15


class CloudblueSession:
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.116 Safari/537.36'}
        try:
            self.session = requests.Session()
            intercept_log.info('Initiating session: %s', self.session)
            log.debug('Initiating Session')
        except Exception as e:
            log.critical('Unable to initiate session')
            intercept_log.critical(e)
            # pytest.fail(e)

    def getCookies(self):
        self.cookies = self.session.cookies
        intercept_log.debug(self.cookies)

    def getRequest(self, url):
        try:
            self.url = url
            intercept_log.info('GET: %s HEADERS: %s COOKIES: %s '
                               % (self.url, self.headers, self.session.cookies))
            self.get_request_obj = self.session.get(
                self.url, headers=self.headers, timeout=TIMEOUT)
            intercept_log.debug('RECEIVED: %s HEADERS: %s COOKIES: %s '
                                % (self.get_request_obj.url, self.headers, self.session.cookies))
            return self.get_request_obj
        except Exception as e:
            log.critical('Unable to get: %s', self.url)
            intercept_log.critical(e)
            # pytest.fail(e)

    def postRequest(self, url, data):
        try:
            self.url = url
            self.data = data
            self.getCookies()
            intercept_log.info('POST: %s HEADERS: %s COOKIES: %s '
                               % (self.url, self.headers, self.cookies))
            self.post_request_obj = self.session.post(
                self.url, data=self.data, cookies=self.cookies, headers=self.headers, timeout=TIMEOUT)
            intercept_log.debug(
                'History length', self.post_request_obj.history.__len__)
            self.redirects = [str(redirect.url)
                              for redirect in self.post_request_obj.history]
            self.redirects.append(str(self.post_request_obj.url))
            for redirect in self.redirects:
                intercept_log.debug('HISTORY: %s    %s' %
                                    (redirect, redirect.data))
            intercept_log.debug('RECEIVED: %s HEADERS: %s COOKIES: %s DATA: %s'
                                % (self.post_request_obj.url, self.headers, self.session.cookies, self.data))
            return self.post_request_obj
        except Exception as e:
            log.critical('Unable to post: %s', self.url)
            intercept_log.critical(e)
            # pytest.fail(e)

    def __del__(self):
        try:
            self.session.close()
            intercept_log.info('Closing session: %s', self.session)
            log.debug('Closing session')
        except Exception as e:
            log.critical('Unable to close the session: %s', self)
            intercept_log.critical(e)
            # pytest.fail(e)
